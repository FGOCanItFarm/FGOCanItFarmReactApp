import React from 'react';
import { Box, Typography, List, ListItem, Divider } from '@mui/material';

const Instructions = () => {
  return (
    <Box sx={{ p: 3, maxWidth: 920, mx: 'auto' }}>
      <Typography variant="h4" component="h1" gutterBottom>
        FGOCanItFarm — Quick Instructions
      </Typography>

      <Typography variant="subtitle1" gutterBottom>
        A compact, up-to-date guide that highlights recent UI improvements and how to perform common workflows.
      </Typography>

      <Divider sx={{ my: 2 }} />

      <Typography variant="h6">Team selection & quick tips</Typography>
      <List dense>
        <ListItem>
          Use the left-side filters to find servants by name, class, NP type, rarity or tags.
        </ListItem>
        <ListItem>
          Click a servant tile to add them to your active team (up to 6). Click a filled slot to open the per-unit editor.
        </ListItem>
        <ListItem>
          To remove a servant, open the slot and use the Clear / Remove button in the editor.
        </ListItem>
      </List>

      <Divider sx={{ my: 2 }} />

      <Typography variant="h6">Per-unit editor (non-modal, persistent)</Typography>
      <Typography paragraph>
        The editor opens in-place (non-modal) and will not change the page scroll. Values you set here are persisted per-unit so you can tweak NP gauge, initial charge, and form/mode without losing them.
      </Typography>
      <List dense>
        <ListItem>
          NP / Noble Phantasm: set the servant's NP type and level used for the simulation.
        </ListItem>
        <ListItem>
          Initial Charge: enter starting NP gauge (e.g. 50 for 50%).
        </ListItem>
        <ListItem>
          ascension/Form switches (if applicable): choose the servant's form or ascension; these settings persist per-slot.
        </ListItem>
      </List>

      <Divider sx={{ my: 2 }} />

      <Typography variant="h6">Commands & Skill choices</Typography>
      <Typography paragraph>
        Command input is handled by the canonical SourceTargetCommandInput component (previously exposed as TwoTeamView). Use the command panel to add skills, NPs, and other actions. Choice-type skills now use an inline selector instead of a modal.
      </Typography>
      <List dense>
        <ListItem>
          Choice skills: when you tap a choice-capable skill, an inline choice bar appears above the general commands. There are two groups: a 2-choice group and a 3-choice group. A vertical divider separates them for clarity.
        </ListItem>
        <ListItem>
          If a servant's choice includes a targetable option, the choice will use the special target-aware command generator. The interface provides explicit buttons so you can manually select the correct option.
        </ListItem>
        <ListItem>
          Command tokens generated by the UI are shown in the command list. You can reorder or remove commands before running a simulation.
        </ListItem>
      </List>

      <Divider sx={{ my: 2 }} />

      <Typography variant="h6">Submit & simulate</Typography>
      <Typography paragraph>
        Once your team and commands are ready, submit the team to run the simulation. The submit flow provides a final confirmation and shows the commands that will execute.
      </Typography>

      <Divider sx={{ my: 2 }} />

      <Typography variant="h6">Troubleshooting & tips</Typography>
      <List dense>
        <ListItem>
          If choice controls don't appear, try selecting the skill again or check the console for debug logs (the app logs choice flow with tags like <code>[STCI]</code>).
        </ListItem>
        <ListItem>
          Hover popovers have been removed — information and edit actions are exposed with persistent icon buttons so accidental hovers won't change the UI.
        </ListItem>
        <ListItem>
          If you notice incorrect choice mapping for a specific servant/skill, report the servant collection and skill index so we can add a specific mapping rule.
        </ListItem>
      </List>

      <Divider sx={{ my: 2 }} />

      <Typography variant="body2" color="text.secondary">
        Questions or feedback? Send an email to <a href="mailto:support@fgocanitfarm.com">support@fgocanitfarm.com</a>.
      </Typography>
    </Box>
  );
};

export default Instructions;